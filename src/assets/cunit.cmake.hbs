
include(GNUInstallDirs)
include(CMakeFindDependencyMacro)

{{#if android}}
  message("EXECUTING: cunit configure
      --ANDROID_ABI=${ANDROID_ABI}
      --CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      --CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
      --CMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}
      --CMAKE_SYSTEM=${CMAKE_SYSTEM}
      --ANDROID_NDK=${ANDROID_NDK}
      --ANDROID_PLATFORM=${ANDROID_PLATFORM}
      --ANDROID_PIE=${ANDROID_PIE}
      --ANDROID_STL=${ANDROID_STL}
      --ANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}")

  execute_process(
    COMMAND cunit configure
      --ANDROID_ABI=${ANDROID_ABI}
      --CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      --CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
      --CMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}
      --CMAKE_SYSTEM=${CMAKE_SYSTEM}
      --ANDROID_NDK=${ANDROID_NDK}
      --ANDROID_PLATFORM=${ANDROID_PLATFORM}
      --ANDROID_PIE=${ANDROID_PIE}
      --ANDROID_STL=${ANDROID_STL}
      --ANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
    RESULT_VARIABLE CUNIT_ERR
  )

  if (NOT CUNIT_ERR EQUAL 0)
    message(FATAL_ERROR "CUnit configure failed")
  endif()

  set(ARCH ${ANDROID_ABI})
    if (${ANDROID_ABI} STREQUAL "arm64-v8a")
    set(ARCH aarch64)
  elseif (${ANDROID_ABI} STREQUAL "armeabi-v7a")
    set(ARCH arm)
  endif ()

  string(TOLOWER "${ARCH}-android" CUNIT_BUILD_TYPE)
  set(CUNIT_BUILD_DIR "${CMAKE_SOURCE_DIR}/.cunit/${CUNIT_BUILD_TYPE}")
  set(CUNIT_BUILD_ROOT "${CUNIT_BUILD_DIR}/root")

  message(STATUS "CUnit build type ${CUNIT_BUILD_TYPE}: ${CUNIT_BUILD_ROOT}")

  include_directories(
      "${CUNIT_BUILD_ROOT}/include"
    BEFORE
  )

  link_directories(
    "${CUNIT_BUILD_ROOT}/lib"
  )

  list(INSERT CMAKE_MODULE_PATH 0 "${CUNIT_BUILD_ROOT}/lib/cmake")
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CUNIT_BUILD_ROOT}/lib/cmake" CACHE STRING "Modules for CMake" FORCE)
{{else}}

  # GET THE TOOLCHAIN
  if (CMAKE_TOOLCHAIN_FILE)
    include(${CMAKE_TOOLCHAIN_FILE})
  endif()

  # AVAILABLE SYSTEM TYPES
  set(CUNIT_SYSTEM_TYPES "{{buildTypeNames}}" CACHE STRING "" FORCE)

  string(TOLOWER "${CMAKE_SYSTEM_NAME}" CUNIT_SYSTEM_NAME)
  string(REPLACE "-" "_" CUNIT_SYSTEM "${CMAKE_SYSTEM_PROCESSOR}-${CUNIT_SYSTEM_NAME}")

  list(FIND CUNIT_SYSTEM_TYPES ${CUNIT_SYSTEM} CUNIT_SYSTEM_TYPE_FOUND)
  if(${CUNIT_SYSTEM_TYPE_FOUND} EQUAL -1)
    #message(FATAL_ERROR "Unknown build type ${CMAKE_BUILD_TYPE}, valid values are: ${CMAKE_CONFIGURATION_TYPES}")
    set(CUNIT_SYSTEM {{defaultBuildTypeName}})
    message(STATUS "Setting default system type: ${CUNIT_SYSTEM}")

  endif()

  message(STATUS "C-UNIT system type: ${CUNIT_SYSTEM}")

  {{#each buildTypes}}

    # BUILD_TYPE {{ name }}
    if("${CUNIT_SYSTEM}" STREQUAL "{{ name }}")

      {{#if toolchain.file }}
      set(CMAKE_TOOLCHAIN_FILE  {{ toolchain.file }})
      {{/if}}

      include_directories(
          "{{rootDir}}/include"
        BEFORE
      )

      link_directories(
          "{{rootDir}}/lib"
      )

      list(INSERT CMAKE_MODULE_PATH 0 "{{rootDir}}/lib/cmake")
      set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "{{rootDir}}/lib/cmake" CACHE STRING "Modules for CMake" FORCE)
    endif()
  {{/each}}
{{/if }}

# FIND TOOL IMPL
macro(find_tool name)
  set(_args ${ARGN})
  list(GET _args 0 _isRequired)
  set(_toolsCmake "{{toolsRoot}}/lib/cmake")
  set(_toolFile "${_toolsCmake}/FindTool${name}.cmake")
  if (EXISTS ${_toolFile})
    include(${_toolFile})
  elseif(${_isRequired} STREQUAL "REQUIRED")
    message(FATAL_ERROR "Unable to find tool ${name} @ ${_toolFile}")
  endif()
endmacro()