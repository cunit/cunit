
include(GNUInstallDirs)
include(CMakeFindDependencyMacro)

{{#if android}}
  message("EXECUTING: cunit configure
      --ANDROID_ABI=${ANDROID_ABI}
      --CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      --CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      --CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
      --ANDROID_NDK=${ANDROID_NDK}
      --ANDROID_PLATFORM=${ANDROID_PLATFORM}
      --ANDROID_PIE=${ANDROID_PIE}
      --ANDROID_STL=${ANDROID_STL}
      --ANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}")

  execute_process(
    COMMAND cunit configure
      --ANDROID_ABI=${ANDROID_ABI}
      --CMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
      --CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
      --CMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}
      --ANDROID_NDK=${ANDROID_NDK}
      --ANDROID_PLATFORM=${ANDROID_PLATFORM}
      --ANDROID_PIE=${ANDROID_PIE}
      --ANDROID_STL=${ANDROID_STL}
      --ANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
    RESULT_VARIABLE CUNIT_ERR
  )

  if (NOT CUNIT_ERR EQUAL 0)
    message(FATAL_ERROR "CUnit configure failed")
  endif()

  set(ARCH ${ANDROID_ABI})
  if (${ANDROID_ABI} STREQUAL arm64-v8a)
    set(ARCH aarch64)
  endif()

  string(TOLOWER "${ARCH}_${CMAKE_BUILD_TYPE}" CUNIT_BUILD_TYPE)
  set(CUNIT_BUILD_DIR "${CMAKE_SOURCE_DIR}/.cunit/${CUNIT_BUILD_TYPE}")
  set(CUNIT_BUILD_ROOT "${CUNIT_BUILD_DIR}/root")

  message(STATUS "CUnit build type ${CUNIT_BUILD_TYPE}: ${CUNIT_BUILD_ROOT}")

  include_directories(
      "${CUNIT_BUILD_ROOT}/include"
    BEFORE
  )

  link_directories(
    "${CUNIT_BUILD_ROOT}/lib"
  )

  list(INSERT CMAKE_MODULE_PATH 0 "${CUNIT_BUILD_ROOT}/lib/cmake")
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CUNIT_BUILD_ROOT}/lib/cmake" CACHE STRING "Modules for CMake" FORCE)
{{else}}
  # AVAILABLE BUILD TYPES
  set(CMAKE_CONFIGURATION_TYPES "{{buildTypeNames}}" CACHE STRING "" FORCE)

  list(FIND CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_FOUND)
  if(${CMAKE_BUILD_TYPE_FOUND} EQUAL -1)
    message(FATAL_ERROR "Unknown build type ${CMAKE_BUILD_TYPE}, valid values are: ${CMAKE_CONFIGURATION_TYPES}")
  endif()


  # GLOBAL BUILD TYPE NAME DECLARATIOn
  {{#each buildTypes}}
  set(BT_{{ nameUpper }} {{ name }})
  {{/each}}

  {{#each buildTypes}}
  # BUILD_TYPE {{ name }}
  if(${CMAKE_BUILD_TYPE} STREQUAL "{{ name }}")

    {{#if toolchain.file }}
    set(CMAKE_TOOLCHAIN_FILE  {{ toolchain.file }})
    {{/if}}

    include_directories(
        "{{rootDir}}/include"
      BEFORE
    )

    link_directories(
        "{{rootDir}}/lib"
    )

    list(INSERT CMAKE_MODULE_PATH 0 "{{rootDir}}/lib/cmake")
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "{{rootDir}}/lib/cmake" CACHE STRING "Modules for CMake" FORCE)
  endif()
  {{/each}}
{{/if }}

# FIND TOOL IMPL
macro(find_tool name)
  set(_args ${ARGN})
  list(GET _args 0 _isRequired)
  set(_toolsCmake "{{toolsRoot}}/lib/cmake")
  set(_toolFile "${_toolsCmake}/FindTool${name}.cmake")
  if (EXISTS ${_toolFile})
    include(${_toolFile})
  elseif(${_isRequired} STREQUAL "REQUIRED")
    message(FATAL_ERROR "Unable to find tool ${name} @ ${_toolFile}")
  endif()
endmacro()